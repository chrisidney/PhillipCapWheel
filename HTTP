<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spinning Wheel</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: "Roboto", sans-serif;
            background: #1d2959;
            color: white;
            text-align: center;
        }

        h1 {
            padding: 25px;
        }

        #wheel {
            margin-top: 20px;
        }

        canvas {
            background-color: #FFFFFF;
            border-radius: 50%;
            cursor: pointer;
        }

        #counter {
            margin-top: 20px;
            font-size: 1.5em;
        }

        textarea {
            width: 300px;
            height: 100px;
            margin-top: 10px;
            margin-bottom: 10px;
            padding: 10px;
            font-family: "Roboto", sans-serif;
            font-size: 16px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>PhillipCapital Lucky Spin</h1>

    <!-- Text Area for Names and Button -->
    <div>
        <label for="names">Enter names (one per line): </label><br>
        <textarea id="names">Justin&#10;Rebecca&#10;Chris&#10;Siti&#10;Ian&#10;Gini&#10;Lisa&#10;Me Ling&#10;Ken</textarea><br>
        <button onclick="updateWheelFromInput()">Update Wheel</button>
    </div>

    <div id="wheel">
        <canvas id="canvas" width="600" height="600"></canvas>
    </div>

    <div id="counter">Click the wheel to spin!</div>

   <script>
    // Utility functions
    function shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    function assignColors(segments, colors) {
        let assignedColors = [];
        for (let i = 0; i < segments.length; i++) {
            const previousColor = assignedColors[i - 1];
            let availableColors = colors.slice();
            
            // Remove the previous color from the list of available colors
            if (previousColor) {
                availableColors = availableColors.filter(color => color !== previousColor);
            }

            // Randomly assign a color from the remaining available colors
            const color = availableColors[Math.floor(Math.random() * availableColors.length)];
            assignedColors.push(color);
        }
        return assignedColors;
    }

    // Wheel object
    const wheel = {
        timerHandle: 0,
        timerDelay: 33,
        angleCurrent: 0,
        angleDelta: 0,
        size: 290,
        canvasContext: null,
        colors: [
            "#004B99", "#87CEEB", "#C8A560", "#C6D9ED",
            "#191970", "#1D2959", "#5F657C", "#54639F",
            "#AB9C60", "#666699"
        ],
        segments: [],
        assignedColors: [],
        maxSpeed: Math.PI / 16,
        upTime: 1000,
        downTime: 17000,
        spinStart: 0,
        frames: 0,
        centerX: 300,
        centerY: 300,
        spin: function () {
            if (wheel.timerHandle === 0) {
                wheel.spinStart = new Date().getTime();
                wheel.maxSpeed = Math.PI / (16 + Math.random());
                wheel.frames = 0;
                wheel.timerHandle = setInterval(wheel.onTimerTick, wheel.timerDelay);
            }
        },
        onTimerTick: function () {
            wheel.frames++;
            wheel.draw();

            const duration = new Date().getTime() - wheel.spinStart;
            let progress = 0;
            let finished = false;

            if (duration < wheel.upTime) {
                progress = duration / wheel.upTime;
                wheel.angleDelta = wheel.maxSpeed * Math.sin((progress * Math.PI) / 2);
            } else {
                progress = duration / wheel.downTime;
                wheel.angleDelta = wheel.maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2);
                if (progress >= 1) finished = true;
            }

            wheel.angleCurrent += wheel.angleDelta;
            while (wheel.angleCurrent >= Math.PI * 2) {
                wheel.angleCurrent -= Math.PI * 2;
            }

            if (finished) {
                clearInterval(wheel.timerHandle);
                wheel.timerHandle = 0;
                wheel.angleDelta = 0;
                const selectedSegmentIndex = wheel.segments.length - Math.floor((wheel.angleCurrent / (Math.PI * 2)) * wheel.segments.length) - 1;
                document.getElementById("counter").innerText = `Selected: ${wheel.segments[selectedSegmentIndex]}`;
            }
        },
        init: function () {
            wheel.initCanvas();
            wheel.draw();
        },
        initCanvas: function () {
            const canvas = document.getElementById("canvas");
            canvas.addEventListener("click", wheel.spin, false);
            wheel.canvasContext = canvas.getContext("2d");
        },
        update: function () {
            wheel.assignedColors = assignColors(wheel.segments, wheel.colors);
            wheel.draw();
        },
        draw: function () {
            wheel.clear();
            wheel.drawWheel();
            wheel.drawNeedle();
        },
        clear: function () {
            const ctx = wheel.canvasContext;
            ctx.clearRect(0, 0, 600, 600);
        },
        drawNeedle: function () {
            const ctx = wheel.canvasContext;
            const centerX = wheel.centerX;
            const centerY = wheel.centerY;
            const size = wheel.size;
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#000000";
            ctx.fillStyle = "#ffffff";
            ctx.beginPath();
            ctx.moveTo(centerX + size - 40, centerY);
            ctx.lineTo(centerX + size + 20, centerY - 10);
            ctx.lineTo(centerX + size + 20, centerY + 10);
            ctx.closePath();
            ctx.stroke();
            ctx.fill();
        },
        drawSegment: function (key, lastAngle, angle) {
            const ctx = wheel.canvasContext;
            const centerX = wheel.centerX;
            const centerY = wheel.centerY;
            const size = wheel.size;
            const segments = wheel.segments;
            const assignedColors = wheel.assignedColors;

            ctx.save();
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, size, lastAngle, angle, false);
            ctx.lineTo(centerX, centerY);
            ctx.closePath();

            ctx.fillStyle = assignedColors[key];
            ctx.fill();
            ctx.stroke();

            ctx.save();
            ctx.translate(centerX, centerY);
            ctx.rotate((lastAngle + angle) / 2);
            ctx.fillStyle = "#000000";
            ctx.textAlign = "right";
            ctx.font = "bold 20px Arial";
            ctx.fillText(segments[key], size - 10, 0);
            ctx.restore();
            ctx.restore();
        },
        drawWheel: function () {
            const ctx = wheel.canvasContext;
            const angleCurrent = wheel.angleCurrent;
            let lastAngle = angleCurrent;
            const segments = wheel.segments;
            const len = wheel.segments.length;
            const PI2 = Math.PI * 2;

            ctx.lineWidth = 1;
            ctx.strokeStyle = "#1d2959";
            ctx.textBaseline = "middle";
            ctx.textAlign = "center";
            ctx.font = "1.4em Arial";

            for (let i = 0; i < len; i++) {
                const angle = PI2 * ((i + 1) / len) + angleCurrent;
                wheel.drawSegment(i, lastAngle, angle);
                lastAngle = angle;
            }

            // Draw center circle
            ctx.beginPath();
            ctx.arc(wheel.centerX, wheel.centerY, 20, 0, PI2, false);
            ctx.closePath();
            ctx.fillStyle = "#FFFFFF";
            ctx.strokeStyle = "#1d2959";
            ctx.fill();
            ctx.stroke();

            // Draw outer circle
            ctx.beginPath();
            ctx.arc(wheel.centerX, wheel.centerY, wheel.size, 0, PI2, false);
            ctx.closePath();
            ctx.lineWidth = 10;
            ctx.strokeStyle = "#FFFFFF";
            ctx.stroke();
        }
    };

    // New function to update wheel based on input names
    function updateWheelFromInput() {
        const namesInput = document.getElementById("names").value;
        const nameList = namesInput.split("\n").map(name => name.trim()).filter(name => name);
        wheel.segments = nameList;
        wheel.update();
    }

    window.onload = function () {
        wheel.init();
        const initialNames = document.getElementById("names").value.split("\n").map(name => name.trim());
        wheel.segments = initialNames;
        wheel.update();
    };
</script>
